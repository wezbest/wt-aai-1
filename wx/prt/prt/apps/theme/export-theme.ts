#!/usr/bin/env bun

import { watch } from 'node:fs'
import { parseArgs } from 'node:util'
import type { PortoTheme } from './porto-theme.js'

const GENERATED_BY = 'file generated by apps/theme/export-theme.ts'

const PART_NAMES = ['background', 'content', 'border', 'radius'] as const
const VARIANT_NAMES = [
  'error',
  'info',
  'negative',
  'positive',
  'strong',
  'warning',
] as const
const STATE_NAMES = ['hovered', 'focused', 'pressed'] as const

type Entries<T> = { [K in keyof T]: [K, T[K]] }[keyof T][]

function isThemeColor(value: unknown): value is [string, string, string] {
  return Array.isArray(value) && value.length === 3
}

function isThemeNumber(value: unknown): value is [string, number] {
  return (
    Array.isArray(value) && value.length === 2 && typeof value[1] === 'number'
  )
}

let args: ReturnType<typeof parseArgs>
try {
  args = parseArgs({
    allowPositionals: true,
    args: Bun.argv,
    options: {
      as: {
        default: 'css',
        type: 'string',
      },
      help: {
        default: false,
        short: 'h',
        type: 'boolean',
      },
      'no-confirm': {
        default: false,
        type: 'boolean',
      },
      out: {
        default: '',
        short: 'o',
        type: 'string',
      },
      watch: {
        default: false,
        short: 'w',
        type: 'boolean',
      },
    },
    strict: true,
  })
} catch (error) {
  console.error('\nError parsing arguments:\n')
  throw error
}

function cssVars(theme: PortoTheme, prefix = '--') {
  const vars: Record<string, { description?: string; value?: string }> = {}
  for (const [key, value] of Object.entries(theme) as Entries<PortoTheme>) {
    if (key === 'colorScheme' || value === null) continue

    const varName = `${prefix}${camelCaseToKebabCase(key)}`
    const data = cssVarValue(value)

    if (data) {
      vars[varName] = data
    }
  }
  return vars
}

function tailwindCssVars(theme: PortoTheme, prefix = '--') {
  const vars: Record<string, { description?: string; value?: string }> = {}
  for (const [key, value] of Object.entries(theme) as Entries<PortoTheme>) {
    if (key === 'colorScheme' || value === null) continue

    const varName = formatTailwindVarName(key, prefix)
    const data = cssVarValue(value)

    if (data) {
      vars[varName] = data
    }
  }
  return vars
}

function cssVarValue(value: unknown): {
  description: string
  value: string
} | null {
  if (isThemeColor(value)) {
    return {
      description: value[0],
      value: `light-dark(${cssValue(value[1])}, ${cssValue(value[2])})`,
    }
  }
  if (isThemeNumber(value)) {
    return {
      description: value[0],
      value: cssValue(value[1]),
    }
  }
  throw new Error(`Invalid theme value: ${JSON.stringify(value)}`)
}

function cssValue(value: string | number): string {
  if (typeof value === 'string' && value.startsWith('#'))
    return value.toLowerCase()
  return typeof value === 'number' ? `${value}px` : value
}

function camelCaseToKebabCase(str: string): string {
  return str.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase()
}

// Parses a color name into its components:
// - surface: the main color name
// - variant: optional variant (e.g. "error", "info")
// - state: optional state (e.g. "hovered", "focused")
// - part: the part of the theme (e.g. "background", "content", "border", "radius", "other")
// - partVariant: optional additional variant for the part (e.g "secondary", "tertiary")
function parseColorName(colorName: string): {
  surface: string
  variant?: string
  state?: string
  part: 'background' | 'content' | 'border' | 'radius' | 'other'
  partVariant?: string
} {
  const parts: string[] = []
  let current = ''

  for (const [index, char] of colorName.split('').entries()) {
    const isUpperCase = char === char.toUpperCase()

    if (index === 0 || !isUpperCase) {
      current += char
      continue
    }

    parts.push(current.toLowerCase())
    current = char
  }
  if (current) parts.push(current.toLowerCase())

  let part: 'background' | 'content' | 'border' | 'radius' | 'other' = 'other'
  let partIndex = -1

  for (const partName of PART_NAMES) {
    if (parts.includes(partName)) {
      part = partName
      partIndex = parts.indexOf(partName)
      break
    }
  }

  if (part === 'other') {
    return {
      part: 'other',
      surface: colorName.toLowerCase(),
    }
  }

  const beforePart = parts.slice(0, partIndex)
  const afterPart = parts.slice(partIndex + 1)
  const surface = beforePart[0] || ''

  const state = parts.find((p) =>
    STATE_NAMES.includes(p as (typeof STATE_NAMES)[number]),
  )
  const variant = parts.find((p) => {
    return (
      VARIANT_NAMES.includes(p as (typeof VARIANT_NAMES)[number]) &&
      // only treat something as a variant if it's not the surface name itself
      p !== surface
    )
  })

  // filter out names that are already identified as state or variant
  const remainingAfterPart = afterPart.filter(
    (p) => p !== state && p !== variant,
  )

  const partVariant =
    remainingAfterPart.length > 0 ? remainingAfterPart.join('') : undefined

  return { part, partVariant, state, surface, variant }
}

function formatTailwindVarName(colorName: string, prefix: string): string {
  const parsed = parseColorName(colorName)

  let varName = prefix

  if (parsed.part === 'background') {
    varName += 'background-color-th_'
  } else if (parsed.part === 'content') {
    varName += 'text-color-th_'
  } else if (parsed.part === 'border') {
    varName += 'border-color-th_'
  } else if (parsed.part === 'radius') {
    varName += 'radius-th_'
  } else if (parsed.part === 'other') {
    varName += 'color-th_'
  }

  const parts = [parsed.surface]
  if (parsed.variant) parts.push(parsed.variant.toLowerCase())
  if (parsed.state) parts.push(parsed.state.toLowerCase())
  if (parsed.partVariant) parts.push(parsed.partVariant.toLowerCase())

  varName += parts.join('-')

  return varName
}

function generateMdx(theme: PortoTheme): string {
  const lines: string[] = [
    `{/* ${GENERATED_BY} */}

# Theme

See the \`theme\` option of [Mode.dialog](/sdk/api/mode#modedialog) to learn how to use custom themes with Porto. When using a custom theme with \`Mode.dialog\`, all properties but \`colorScheme\` are optional and will fall back to the default theme values.

Theme related types exported by \`porto/theme\`:

| Theme value type | Description |
|-|-|
| \`Theme.Color\` | A color value, either a hex color (with or without alpha) or \`"transparent"{:ts}\`. e.g. \`"#ff00ff"{:ts}\` |
| \`Theme.LightDarkColor\` | A color pair for light and dark modes. Individual values are \`Theme.Color\`. e.g. \`["#ff00ff", "#00ff00"]{:ts}\` |
| \`ThemeFragment\` | A partial \`Theme\` definition, used to extend themes with partial definitions. This is what gets passed to \`Mode.dialog\` as the \`theme\` option. |

## colorScheme

- **Type:** \`"light" | "dark" | "light dark"{:ts}\`

The color scheme for the theme. With \`"light dark"\`, theme colors must be provided as \`Theme.LightDarkColor\` (light and dark color pairs). Otherwise, colors must be provided as \`Theme.Color\`.
`,
  ]

  for (const [key, value] of Object.entries(theme) as Entries<PortoTheme>) {
    if (key === 'colorScheme' || value === null) continue

    const description = Array.isArray(value) ? value[0] : 'Theme token'
    lines.push(`## ${key}`)
    lines.push('')

    if (isThemeColor(value)) {
      lines.push('- **Type:** \`Theme.LightDarkColor | Theme.Color{:ts}\`')
      lines.push(`- **Default:** \`["${value[1]}", "${value[2]}"]{:ts}\``)
    } else if (isThemeNumber(value)) {
      lines.push(`- **Default:** \`${value[1]}{:ts}\``)
    }

    lines.push('')
    lines.push(description)
    lines.push('')
  }

  return lines.join('\n')
}

function generateTailwindMappings(theme: PortoTheme): string {
  const mappings: string[] = []

  for (const [key, value] of Object.entries(theme) as Entries<PortoTheme>) {
    if (key === 'colorScheme' || value === null) continue

    const tailwindVar = formatTailwindVarName(key, '--')
    const type = isThemeNumber(value) ? 'px' : 'color'

    mappings.push(`  ['${key}', '${tailwindVar}', '${type}'],`)
  }

  return `/* ${GENERATED_BY} */

export type TailwindThemeMapping = [property: string, tailwindVar: string, type: 'color' | 'px']

export const tailwindThemeMappings: TailwindThemeMapping[] = [
${mappings.join('\n')}
]
`
}

function css(
  theme: PortoTheme,
  {
    comments,
    nestIn,
    prefix = '',
  }: {
    comments?: boolean
    nestIn?: string
    prefix?: string
  } = {},
) {
  const padding = nestIn ? '  ' : ''

  let cssContent = `/* ${GENERATED_BY} */\n`

  if (nestIn) cssContent += `\n${nestIn} {\n`
  cssContent += Object.entries(cssVars(theme, prefix))
    .map(([key, { value, description }]) => {
      return (
        (comments && description ? `${padding}/* ${description} */\n` : '') +
        `${padding}${key}: ${value};`
      )
    })
    .join(comments ? '\n\n' : '\n')

  if (nestIn) cssContent += '\n}'

  return cssContent
}

function tailwindCss(
  theme: PortoTheme,
  {
    comments,
  }: {
    comments?: boolean
  } = {},
) {
  const padding = '  '

  let cssContent = `/* ${GENERATED_BY} */\n\n@theme {\n`

  const vars = tailwindCssVars(theme, '--')
  cssContent += Object.entries(vars)
    .map(([key, { value, description }]) => {
      return (
        (comments && description ? `${padding}/* ${description} */\n` : '') +
        `${padding}${key}: ${value};`
      )
    })
    .join(comments ? '\n\n' : '\n')

  cssContent += '\n}'

  return cssContent
}

const formatExporters = {
  css(theme) {
    return css(theme, {
      comments: false,
      nestIn: ':root',
      prefix: '--color-',
    })
  },
  css_commented(theme) {
    return css(theme, {
      comments: true,
      nestIn: ':root',
      prefix: '--color-',
    })
  },
  json(theme) {
    const themeOnly = Object.fromEntries(
      Object.entries(theme).map(([key, value]) => {
        if (key === 'colorScheme') return [key, value]
        if (isThemeColor(value)) {
          return [key, [value[1], value[2]]]
        }
        if (isThemeNumber(value)) {
          return [key, value[1]]
        }
        return [key, value]
      }),
    )
    return JSON.stringify(themeOnly, null, 2)
  },
  mdx(theme) {
    return generateMdx(theme)
  },
  tailwind(theme) {
    return tailwindCss(theme, { comments: false })
  },
  tailwind_commented(theme) {
    return tailwindCss(theme, { comments: true })
  },
  tailwind_mappings(theme) {
    return generateTailwindMappings(theme)
  },
} satisfies Record<string, (theme: PortoTheme) => string>

if (args.values.help) {
  console.log(`
Usage: export-theme.ts [options]

Options:
  --as <format>      Output format (default: css).
                     Supported formats: ${Object.keys(formatExporters).join(', ')}.
  --help, -h         Show this help message.
  --out              File to write the exported theme to. Prints to stdout if not specified.
  --watch, -w        Watch for changes and re-export the theme. Requires an output file.
`)
  process.exit(0)
}

const isValidExporter = (as: unknown): as is keyof typeof formatExporters => {
  return typeof as === 'string' && Object.keys(formatExporters).includes(as)
}

if (!isValidExporter(args.values.as)) {
  console.error(
    `Invalid format: ${args.values.as}. Supported formats: ${Object.keys(formatExporters).join(', ')}.`,
  )
  process.exit(1)
}

const outPath =
  (typeof args.values.out === 'string' && args.values.out.trim()) || null

async function exportTheme(confirmIfExists = true) {
  if (!isValidExporter(args.values.as)) throw new Error() // type guard

  delete require.cache[require.resolve('./porto-theme.js')]
  const { portoTheme } = await import('./porto-theme.js')

  const exporter = formatExporters[args.values.as]
  const output = exporter(portoTheme)

  if (outPath) {
    const file = Bun.file(outPath)
    if (await file.exists()) {
      const shouldOverwrite =
        confirmIfExists && !args.values['no-confirm']
          ? confirm(`File ${outPath} already exists. Overwrite?`)
          : true
      if (!shouldOverwrite) {
        console.error('Export cancelled.')
        return
      }
    }

    await Bun.write(outPath, output)
    console.log(`Theme exported to ${outPath} in ${args.values.as} format.`)
  } else {
    console.log(output)
  }
}

if (args.values.watch) {
  const stdoutMode = outPath === null
  if (stdoutMode) console.clear()

  exportTheme()

  if (!stdoutMode) console.log('Watching for changes…')

  watch('./porto-theme.ts', async (eventType, filename) => {
    if (eventType === 'change') {
      if (stdoutMode) console.clear()
      else console.log(`\n${filename} changed, re-exporting…`)
      try {
        await exportTheme(false)
      } catch (error) {
        console.error('Error re-exporting theme:', error)
      }
    }
  })
} else {
  exportTheme()
}
